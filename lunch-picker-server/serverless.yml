# NOTE: update this with your service name
service: lunch-picker-server

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  webpackIncludeModules:
    forceInclude:
      - mysql2
    forceExclude:
      - aws-sdk

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ap-southeast-2
  environment: ${file(serverless-var.yml):${self:provider.stage}}
  
  vpc:
    securityGroupIds:
      - sg-01d0fbe4e3c2c4247
    subnetIds:
      - subnet-242ed57c
      - subnet-fe0f4b99
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  #
  #environment: ${file(env.yml):${self:provider.stage}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: "*"
    - Effect: Allow
      Action:
        - ec2:CreateNetworkInterface 
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface 
      Resource: "*"
    - Effect: Allow
      Action: 
        - ssm:GetParameter
        - ssm:GetParameters
      Resource: "*"
    - Effect: Allow
      Action: 
        - rekognition:*	
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:ap-southeast-2:*:*"
    - Effect: Allow
      Action:
        - iot:Connect
        - iot:Publish
        - iot:Subscribe
        - iot:Receive
        - iot:GetThingShadow
        - iot:UpdateThingShadow
      Resource: "*"

package:
  individually: true

functions:
  create_restaurant:
    handler: src/api/restaurants/create.handler
    events:
      - http:
          path: restaurants
          method: post
          cors: true
          authorizer: aws_iam

  get_restaurant:
    handler: src/api/restaurants/get.handler
    events:
      - http:
          path: restaurants/{id}
          method: get
          cors: true
          authorizer: aws_iam

  update_restaurant:
    handler: src/api/restaurants/update.handler
    events:
      - http:
          path: restaurants/{id}
          method: put
          cors: true
          authorizer: aws_iam
  
  delete_restaurant:
    handler: src/api/restaurants/delete.handler
    events:
      - http:
          path: restaurants/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  list_restaurant:
    handler: src/api/restaurants/list.handler
    events:
      - http:
          path: restaurants
          method: get
          cors: true
          authorizer: aws_iam

  detect_restaurant:
    handler: src/api/restaurants/detect.handler
    events:
      - http:
          path: restaurants/detect
          method: get
          cors: true
          authorizer: aws_iam

  get_team:
    handler: src/api/teams/get.handler
    events:
      - http:
          path: teams/{id}
          method: get
          cors: true
          authorizer: aws_iam

  create_team:
    handler: src/api/teams/create.handler
    events:
      - http:
          path: teams
          method: post
          cors: true
          authorizer: aws_iam

  update_team:
    handler: src/api/teams/update.handler
    events:
      - http:
          path: teams/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete_team:
    handler: src/api/teams/delete.handler
    events:
      - http:
          path: teams/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  list_team_owned:
    handler: src/api/teams/listOwned.handler
    events:
      - http:
          path: teams/owned
          method: get
          cors: true
          authorizer: aws_iam

  list_team_joined:
    handler: src/api/teams/listJoined.handler
    events:
      - http:
          path: teams/joined
          method: get
          cors: true
          authorizer: aws_iam

  add_team_member:
    handler: src/api/teams/teamManager/addTeamMember.handler
    events:
      - http:
          path: teams/{id}/users
          method: post
          cors: true
          authorizer: aws_iam

  get_team_member:
    handler: src/api/teams/teamManager/getTeamMembers.handler
    events:
      - http:
          path: teams/{id}/users
          method: get
          cors: true
          authorizer: aws_iam

  remove_team_member:
    handler: src/api/teams/teamManager/removeTeamMember.handler
    events:
      - http:
          path: teams/{id}/users/{userId}
          method: delete
          cors: true
          authorizer: aws_iam
      
  send_team_invitation:
    handler: src/api/teams/teamManager/sendInvitation.handler
    events:
      - http:
          path: teams/{id}/invitations
          method: post
          cors: true
          authorizer: aws_iam

  respond_team_invitation:
    handler: src/api/teams/teamManager/respondInvitation.js
    events:
      - http:
          path: teams/invitations/{id}
          method: put
          cors: true
          authorizer: aws_iam
          
  yelpSearch:
    handler: src/api/yelp/search.handler
    events:
      - http:
          path: restaurants/external/search
          method: get
          cors: true
          authorizer: aws_iam
    
  yelpGet:
    handler: src/api/yelp/get.handler
    events:
      - http:
          path: restaurants/external/{id}
          method: get
          cors: true
          authorizer: aws_iam

  yelpReviews: 
    handler: src/api/yelp/reviews.handler
    events:
      - http:
          path: restaurants/external/{id}/reviews
          method: get
          cors: true
          authorizer: aws_iam
      
  iotPresignedUrl:
    handler: src/api/iot/presignedUrl.handler
    timeout: 30
    events:
      - http: OPTIONS /iot-presigned-url
      - http:
          method: GET
          path: /iot-presigned-url
  
  notifyDisconnect:
    handler: src/api/iot/notifyDisconnect.handler
    timeout: 30
    events:
      - iot:
          sql: "SELECT * FROM 'last-will'"
 
  

