# NOTE: update this with your service name
service: lunch-picker-server

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  webpackIncludeModules:
    forceInclude:
      - mysql
      - mysql2

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ap-southeast-2
  environment: 
    DB_PASSWORD: ${file(./serverless-var.yml):DB_PASSWORD}
  vpc:
    securityGroupIds:
      - sg-07e7f48a7af8a95f3
    subnetIds:
      - subnet-0e542247
      - subnet-242ed57c
      - subnet-fe0f4b99
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  #
  #environment: ${file(env.yml):${self:provider.stage}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ec2:CreateNetworkInterface 
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface 
        - rekognition:DetectText	
        - iot:Connect
        - iot:Publish
        - iot:Subscribe
        - iot:Receive
        - iot:GetThingShadow
        - iot:UpdateThingShadow
      Resource: "*"

package:
  individually: true

functions:
  create:
    handler: api/create.handler
    events:
      - http:
          path: restaurants
          method: post
          cors: true
          authorizer: aws_iam

  get:
    handler: api/get.handler
    events:
      - http:
          path: restaurants/{id}
          method: get
          cors: true
          authorizer: aws_iam

  update:
    handler: api/update.handler
    events:
      - http:
          path: restaurants/{id}
          method: put
          cors: true
          authorizer: aws_iam
  
  delete:
    handler: api/delete.handler
    events:
      - http:
          path: restaurants/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  list:
    handler: api/list.handler
    events:
      - http:
          path: restaurants
          method: get
          cors: true
          authorizer: aws_iam

  detect:
    handler: api/detect.handler
    events:
      - http:
          path: restaurants/detect
          method: get
          cors: true
          authorizer: aws_iam

  yelpSearch:
    handler: api/yelp/search.handler
    events:
      - http:
          path: restaurants/external/search
          method: get
          cors: true
          authorizer: aws_iam
    
  yelpGet:
    handler: api/yelp/get.handler
    events:
      - http:
          path: restaurants/external/{id}
          method: get
          cors: true
          authorizer: aws_iam

  yelpReviews: 
    handler: api/yelp/reviews.handler
    events:
      - http:
          path: restaurants/external/{id}/reviews
          method: get
          cors: true
          authorizer: aws_iam
      
  iotPresignedUrl:
    handler: iot/presignedUrl.handler
    timeout: 30
    events:
      - http: OPTIONS /iot-presigned-url
      - http:
          method: GET
          path: /iot-presigned-url
    environment:
      IOT_AWS_REGION: ap-southeast-2
      IOT_ENDPOINT_HOST: a14poj2vgozr9g.iot.ap-southeast-2.amazonaws.com
      IOT_ACCESS_KEY: ${file(./serverless-var.yml):IOT_ACCESS_KEY}
      IOT_SECRET_KEY: ${file(./serverless-var.yml):IOT_SECRET_KEY}

  notifyDisconnect:
    handler: iot/notifyDisconnect.handler
    timeout: 30
    events:
      - iot:
          sql: "SELECT * FROM 'last-will'"
    environment:
      IOT_AWS_REGION: ap-southeast-2
      IOT_ENDPOINT_HOST: a14poj2vgozr9g.iot.ap-southeast-2.amazonaws.com
    
  

